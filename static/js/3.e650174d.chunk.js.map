{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/AddPostForm/AddPostForm.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","redux/action-creators/profile.ts","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","assets/images/user-avatar.webp"],"names":["module","exports","Post","React","memo","props","className","style","item","avatar","src","img","alt","message","likesCount","id","AddPostForm","initialValues","post","onSubmit","values","setSubmitting","resetForm","validate","errors","length","name","component","placeholder","type","s","error","addPostAC","newPostText","ADD_POST","setProfileStatusAC","status","SET_PROFILE_STATUS","MyPosts","dispatch","useDispatch","myPosts","posts","map","MyPostsContainer","connect","state","profilePage","addPost","ProfileStatus","editMode","statusValue","activateEditMode","setState","deactivateEditMode","handleProfileStatusUpdate","handleChange","e","currentTarget","value","prevProps","prevState","this","autoFocus","onBlur","onChange","onDoubleClick","PureComponent","ProfileInfo","userInfo","photos","fullName","lookingForAJobDescription","aboutMe","isPhotosSmallExists","small","avatarDefault","wrapper","description","Preloader","Profile","useTypedSelector","authId","auth","userId","useParams","useEffect","a","profileAPI","getProfile","res","data","SET_USER_INFO","console","warn","setUserInfoTC","getProfileStatus","getProfileStatusTC","useCallback","updateProfileStatus","resultCode","updateProfileStatusTC"],"mappings":"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","file":"static/js/3.e650174d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2YdkN\",\"myPosts\":\"MyPosts_myPosts__3WChl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__VCfZb\",\"avatar\":\"Post_avatar__3b1mL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"AddPostForm_error__1c5D7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundImg\":\"ProfileInfo_backgroundImg__zDJmk\",\"wrapper\":\"ProfileInfo_wrapper__3JRwj\",\"name\":\"ProfileInfo_name__1Y5Jv\",\"avatar\":\"ProfileInfo_avatar__yMIdP\",\"description\":\"ProfileInfo_description__35rkD\"};","import React from 'react';\r\nimport style from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n    img: string\r\n    id: string\r\n}\r\n\r\nexport const Post = React.memo((props: PostPropsType) => {\r\n    return (\r\n        <div className={style.item} key={props.id}>\r\n            <img className={style.avatar} src={props.img}\r\n                 alt=\"avatar\"/>\r\n            <span>{props.message}</span>\r\n            <div>\r\n                <span>likes: {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import React from 'react';\r\nimport {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport s from './AddPostForm.module.css'\r\n\r\nexport type AddPostFormValues = {\r\n    post: string\r\n}\r\n\r\ntype AddPostFormPropsType = {\r\n    onSubmit: (newMessage: string) => void\r\n}\r\n\r\nexport const AddPostForm = (props: AddPostFormPropsType) => {\r\n\r\n    const addPostFormValidate = (values: AddPostFormValues) => {\r\n        let errors: Partial<AddPostFormValues> = {};\r\n        if (!values.post) {\r\n            errors.post = 'Field is required';\r\n        } else if (values.post.length > 50) {\r\n            errors.post = 'Max Length is 50 symbols';\r\n        }\r\n        return errors\r\n    }\r\n\r\n    const onSubmitHandler = (\r\n        values: AddPostFormValues,\r\n        {setSubmitting, resetForm}: FormikHelpers<AddPostFormValues>\r\n    ) => {\r\n        props.onSubmit(values.post)\r\n        resetForm({values: {post: ''}})\r\n        setSubmitting(false);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                post: '',\r\n            }}\r\n            onSubmit={onSubmitHandler}\r\n            validate={addPostFormValidate}\r\n        >\r\n            <Form>\r\n                <Field\r\n                    name=\"post\"\r\n                    component={\"textarea\"}\r\n                    placeholder={\"add Post...\"}\r\n                />\r\n                <button type=\"submit\">Add</button>\r\n                <ErrorMessage name=\"post\" component=\"div\" className={s.error}/>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n}","import {\r\n    ADD_POST,\r\n    SET_PROFILE_STATUS,\r\n    SET_USER_INFO,\r\n    UserInfoType\r\n} from \"../reducers/profile-reducer\";\r\nimport {ThunkType} from \"../redux-store\";\r\nimport {profileAPI} from \"../../api/api\";\r\n\r\nexport type ProfileActionsType =\r\n    addPostACType\r\n    | setUserInfoACType\r\n    | setProfileStatusACType\r\n\r\nexport type addPostACType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText,\r\n    } as const\r\n}\r\n\r\nexport type setUserInfoACType = ReturnType<typeof setUserInfoAC>\r\nexport const setUserInfoAC = (userInfo: UserInfoType) => {\r\n    return {\r\n        type: SET_USER_INFO,\r\n        userInfo\r\n    } as const\r\n}\r\n\r\nexport type setProfileStatusACType = ReturnType<typeof setProfileStatusAC>\r\nexport const setProfileStatusAC = (status: string) => {\r\n    return {\r\n        type: SET_PROFILE_STATUS,\r\n        status,\r\n    } as const\r\n}\r\n\r\n// THUNK\r\nexport const setUserInfoTC = (userId: number): ThunkType => async dispatch => {\r\n    try {\r\n        const res = await profileAPI.getProfile(userId)\r\n        dispatch(setUserInfoAC(res.data))\r\n    } catch (err: any) {\r\n        console.warn(err)\r\n    }\r\n}\r\n\r\nexport const getProfileStatusTC = (userId: number): ThunkType => async dispatch => {\r\n    try {\r\n        const res = await profileAPI.getProfileStatus(userId)\r\n        dispatch(setProfileStatusAC(res.data))\r\n    } catch (err: any) {\r\n        console.warn(err)\r\n    }\r\n}\r\n\r\nexport const updateProfileStatusTC = (status: string): ThunkType => async dispatch => {\r\n    try {\r\n        const res = await profileAPI.updateProfileStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setProfileStatusAC(status))\r\n        }\r\n    } catch (err: any) {\r\n        console.warn(err)\r\n    }\r\n}","import React from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddPostForm} from \"./AddPostForm/AddPostForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPostAC} from \"../../../redux/action-creators/profile\";\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addNewPost = (newPostText: string) => {\r\n        dispatch(addPostAC(newPostText))\r\n    }\r\n\r\n    return (\r\n        <div className={style.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm\r\n                onSubmit={addNewPost}\r\n            />\r\n            <div className={style.posts}>\r\n                {props.posts.map(post => {\r\n                    return <Post\r\n                        key={post.id}\r\n                        message={post.message}\r\n                        likesCount={post.likesCount}\r\n                        img={post.img}\r\n                        id={post.id}\r\n                    />\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n})","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC} from \"../../../redux/action-creators/profile\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\nimport {PostType} from \"../../../redux/reducers/profile-reducer\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>,\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void,\r\n}\r\n\r\nexport type MyPostsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React, {ChangeEvent} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    handleProfileStatusUpdate?: (status: string) => void\r\n}\r\n\r\nconst DEFAULT_STATUS = \"Dont have status yet\"\r\n\r\nexport class ProfileStatus extends React.PureComponent<ProfileStatusType> {\r\n    state = {\r\n        editMode: false,\r\n        statusValue: this.props.status\r\n    }\r\n\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.handleProfileStatusUpdate && this.props.handleProfileStatusUpdate(this.state.statusValue)\r\n    }\r\n    handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            statusValue: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>) {\r\n        if (prevProps.status !== this.props.status)\r\n            this.setState({\r\n                statusValue: this.props.status\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.editMode\r\n                    ?\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.statusValue}\r\n                        autoFocus\r\n                        onBlur={this.deactivateEditMode}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    :\r\n                    <span onDoubleClick={this.activateEditMode}>\r\n                        {this.props.status || DEFAULT_STATUS}\r\n                    </span>\r\n                }\r\n            </div>)\r\n    };\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {UserInfoType} from \"../../../redux/reducers/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport avatarDefault from \"../../../assets/images/user-avatar.webp\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    userInfo: UserInfoType\r\n    status: string\r\n    handleProfileStatusUpdate: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = React.memo(props => {\r\n    const {\r\n        userInfo,\r\n        status,\r\n        handleProfileStatusUpdate\r\n    } = props;\r\n    const {photos, fullName, lookingForAJobDescription, aboutMe} = userInfo;\r\n\r\n    const isPhotosSmallExists = photos.small ? photos.small : avatarDefault\r\n\r\n    if (!userInfo) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.wrapper}>\r\n                <img className={s.avatar} src={isPhotosSmallExists} alt=\"avatar\"/>\r\n                <div>\r\n                    <div className={s.name}>\r\n                        <h3>{fullName}</h3>\r\n                    </div>\r\n                    <ProfileStatus\r\n                        status={status}\r\n                        handleProfileStatusUpdate={handleProfileStatusUpdate}\r\n                    />\r\n                    <div className={s.description}>{aboutMe}</div>\r\n                    <div className={s.description}>{lookingForAJobDescription} </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    getProfileStatusTC,\r\n    setUserInfoTC,\r\n    updateProfileStatusTC\r\n} from \"../../redux/action-creators/profile\";\r\n\r\nconst Profile: React.FC = () => {\r\n\r\n    const userInfo = useTypedSelector(state => state.profilePage.userInfo)\r\n    const authId = useTypedSelector(state => state.auth.id)\r\n    const status = useTypedSelector(state => state.profilePage.status)\r\n    const dispatch = useDispatch()\r\n    const {userId} = useParams<'userId'>()\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            dispatch(setUserInfoTC(+userId))\r\n            dispatch(getProfileStatusTC(+userId))\r\n        }\r\n    }, [dispatch, userId])\r\n\r\n    const handleProfileStatusUpdate = useCallback((status: string) => {\r\n        if (userId && authId === +userId) {\r\n            dispatch(updateProfileStatusTC(status))\r\n        }\r\n    }, [dispatch, authId, userId])\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                userInfo={userInfo}\r\n                status={status}\r\n                handleProfileStatusUpdate={handleProfileStatusUpdate}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","export default __webpack_public_path__ + \"static/media/user-avatar.2ca07d6b.webp\";"],"sourceRoot":""}