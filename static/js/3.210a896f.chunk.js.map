{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/AddPostForm/AddPostForm.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/Contact/Contact.module.css","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css","components/Profile/ProfileInfo/ProfileData/ProfileData.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","redux/action-creators/profile.ts","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","assets/images/user-avatar.webp"],"names":["module","exports","Post","React","memo","props","className","style","item","avatar","src","img","alt","message","likesCount","id","AddPostForm","initialValues","post","onSubmit","values","setSubmitting","resetForm","validate","errors","length","s","form","textarea","name","type","component","placeholder","error","Button","btn","addPostAC","newPostText","ADD_POST","setProfileStatusAC","status","SET_PROFILE_STATUS","setUserInfoTC","userId","dispatch","a","profileAPI","getProfile","res","userInfo","data","SET_USER_INFO","console","warn","MyPosts","useDispatch","myPosts","posts","map","MyPostsContainer","connect","state","profilePage","addPost","ProfileStatus","editMode","statusValue","activateEditMode","setState","deactivateEditMode","handleProfileStatusUpdate","handleChange","e","currentTarget","value","prevProps","prevState","this","autoFocus","onBlur","onChange","onDoubleClick","PureComponent","Contact","isEditModeOn","fieldName","formik","getFieldProps","link","href","target","rel","ProfileDataForm","onEditProfileClick","fullName","lookingForAJobDescription","aboutMe","contacts","lookingForAJob","useFormik","getState","auth","updateProfile","resultCode","wrapper","handleSubmit","red","checked","Object","keys","key","ProfileData","description","ProfileInfo","savePhoto","isProfileOwner","photos","useState","setEditMode","useCallback","isPhotosSmallExists","small","avatarDefault","avatarBlock","accept","files","onClick","Preloader","Profile","useTypedSelector","authId","useParams","useEffect","getProfileStatus","getProfileStatusTC","photoFile","setProfileImage","SET_PROFILE_PHOTO","savePhotoTC","updateProfileStatus","updateProfileStatusTC"],"mappings":"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","file":"static/js/3.210a896f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2YdkN\",\"myPosts\":\"MyPosts_myPosts__3WChl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__VCfZb\",\"avatar\":\"Post_avatar__3b1mL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"AddPostForm_error__1c5D7\",\"form\":\"AddPostForm_form__2T9gk\",\"textarea\":\"AddPostForm_textarea__3vReY\",\"btn\":\"AddPostForm_btn__3oRpQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundImg\":\"ProfileInfo_backgroundImg__zDJmk\",\"wrapper\":\"ProfileInfo_wrapper__3JRwj\",\"name\":\"ProfileInfo_name__1Y5Jv\",\"avatar\":\"ProfileInfo_avatar__yMIdP\",\"description\":\"ProfileInfo_description__35rkD\",\"avatarBlock\":\"ProfileInfo_avatarBlock__2aLem\",\"btn\":\"ProfileInfo_btn__1UQqq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Contact_link__12Nfs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileDataForm_wrapper__2UjCh\",\"red\":\"ProfileDataForm_red__u4ORM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileData_wrapper__2IhT1\",\"description\":\"ProfileData_description__3gUcb\",\"name\":\"ProfileData_name__3ytuh\"};","import React from 'react';\r\nimport style from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n    img: string\r\n    id: string\r\n}\r\n\r\nexport const Post = React.memo((props: PostPropsType) => {\r\n    return (\r\n        <div className={style.item} key={props.id}>\r\n            <img className={style.avatar} src={props.img}\r\n                 alt=\"avatar\"/>\r\n            <span>{props.message}</span>\r\n            <div>\r\n                <span>likes: {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import React from 'react';\r\nimport {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport s from './AddPostForm.module.css'\r\nimport {Button} from \"../../../../UI/Button/Button\";\r\n\r\nexport type AddPostFormValues = {\r\n    post: string\r\n}\r\n\r\ntype AddPostFormPropsType = {\r\n    onSubmit: (newMessage: string) => void\r\n}\r\n\r\nexport const AddPostForm = (props: AddPostFormPropsType) => {\r\n\r\n    const addPostFormValidate = (values: AddPostFormValues) => {\r\n        let errors: Partial<AddPostFormValues> = {};\r\n        if (!values.post) {\r\n            errors.post = 'Field is required';\r\n        } else if (values.post.length > 50) {\r\n            errors.post = 'Max Length is 50 symbols';\r\n        }\r\n        return errors\r\n    }\r\n\r\n    const onSubmitHandler = (\r\n        values: AddPostFormValues,\r\n        {setSubmitting, resetForm}: FormikHelpers<AddPostFormValues>\r\n    ) => {\r\n        props.onSubmit(values.post)\r\n        resetForm({values: {post: ''}})\r\n        setSubmitting(false);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                post: '',\r\n            }}\r\n            onSubmit={onSubmitHandler}\r\n            validate={addPostFormValidate}\r\n        >\r\n            <Form className={s.form}>\r\n                <div>\r\n                    <Field\r\n                        className={s.textarea}\r\n                        name=\"post\"\r\n                        type='text'\r\n                        component={\"textarea\"}\r\n                        placeholder={\"add Post...\"}\r\n                    />\r\n                    <ErrorMessage name=\"post\" component=\"div\" className={s.error}/>\r\n                </div>\r\n                <Button className={s.btn} type=\"submit\">Add</Button>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n}","import {\r\n    ADD_POST, PhotosType, SET_PROFILE_PHOTO,\r\n    SET_PROFILE_STATUS,\r\n    SET_USER_INFO,\r\n    UserInfoType\r\n} from \"../reducers/profile-reducer\";\r\nimport {ThunkType} from \"../redux-store\";\r\nimport {profileAPI} from \"../../api/api\";\r\n\r\nexport type ProfileActionsType =\r\n    addPostACType\r\n    | setUserInfoACType\r\n    | setProfileStatusACType\r\n    | SetProfilePhotoACACType\r\n\r\nexport type addPostACType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText,\r\n    } as const\r\n}\r\n\r\nexport type setUserInfoACType = ReturnType<typeof setUserInfoAC>\r\nexport const setUserInfoAC = (userInfo: UserInfoType) => {\r\n    return {\r\n        type: SET_USER_INFO,\r\n        userInfo\r\n    } as const\r\n}\r\n\r\nexport type setProfileStatusACType = ReturnType<typeof setProfileStatusAC>\r\nexport const setProfileStatusAC = (status: string) => {\r\n    return {\r\n        type: SET_PROFILE_STATUS,\r\n        status,\r\n    } as const\r\n}\r\n\r\nexport type SetProfilePhotoACACType = ReturnType<typeof setProfilePhotoAC>\r\nexport const setProfilePhotoAC = (photos: PhotosType) => {\r\n    return {\r\n        type: SET_PROFILE_PHOTO,\r\n        photos,\r\n    } as const\r\n}\r\n\r\n// THUNK\r\nexport const setUserInfoTC = (userId: number): ThunkType => async dispatch => {\r\n    try {\r\n        const res = await profileAPI.getProfile(userId)\r\n        dispatch(setUserInfoAC(res.data))\r\n    } catch (err: any) {\r\n        console.warn(err)\r\n    }\r\n}\r\n\r\nexport const updateProfileInfoTC = (data: Omit<UserInfoType, 'photos'>): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        const userId = getState().auth.id\r\n        const res = await profileAPI.updateProfile(data)\r\n        if (res.data.resultCode === 0 && userId) {\r\n            dispatch(setUserInfoTC(userId))\r\n        }\r\n    } catch (err: any) {\r\n        console.warn(err)\r\n    }\r\n}\r\n\r\nexport const getProfileStatusTC = (userId: number): ThunkType => async dispatch => {\r\n    try {\r\n        const res = await profileAPI.getProfileStatus(userId)\r\n        dispatch(setProfileStatusAC(res.data))\r\n    } catch (err: any) {\r\n        console.warn(err)\r\n    }\r\n}\r\n\r\nexport const updateProfileStatusTC = (status: string): ThunkType => async dispatch => {\r\n    try {\r\n        const res = await profileAPI.updateProfileStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setProfileStatusAC(status))\r\n        }\r\n    } catch (err: any) {\r\n        console.warn(err)\r\n    }\r\n}\r\n\r\nexport const savePhotoTC = (photoFile: File, userId: number): ThunkType => async dispatch => {\r\n    try {\r\n        const res = await profileAPI.setProfileImage(photoFile)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setProfilePhotoAC(res.data))\r\n            dispatch(setUserInfoTC(userId))\r\n        }\r\n    } catch (err: any) {\r\n        console.warn(err)\r\n    }\r\n}","import React from 'react';\r\nimport style from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddPostForm} from \"./AddPostForm/AddPostForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPostAC} from \"../../../redux/action-creators/profile\";\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addNewPost = (newPostText: string) => {\r\n        dispatch(addPostAC(newPostText))\r\n    }\r\n\r\n    return (\r\n        <div className={style.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm\r\n                onSubmit={addNewPost}\r\n            />\r\n            <div className={style.posts}>\r\n                {props.posts.map(post => {\r\n                    return <Post\r\n                        key={post.id}\r\n                        message={post.message}\r\n                        likesCount={post.likesCount}\r\n                        img={post.img}\r\n                        id={post.id}\r\n                    />\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n})","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC} from \"../../../redux/action-creators/profile\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\nimport {PostType} from \"../../../redux/reducers/profile-reducer\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>,\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void,\r\n}\r\n\r\nexport type MyPostsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React, {ChangeEvent} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    handleProfileStatusUpdate?: (status: string) => void\r\n}\r\n\r\nconst DEFAULT_STATUS = \"Dont have status yet\"\r\n\r\nexport class ProfileStatus extends React.PureComponent<ProfileStatusType> {\r\n    state = {\r\n        editMode: false,\r\n        statusValue: this.props.status\r\n    }\r\n\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.handleProfileStatusUpdate && this.props.handleProfileStatusUpdate(this.state.statusValue)\r\n    }\r\n    handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            statusValue: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>) {\r\n        if (prevProps.status !== this.props.status)\r\n            this.setState({\r\n                statusValue: this.props.status\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.editMode\r\n                    ?\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.statusValue}\r\n                        autoFocus\r\n                        onBlur={this.deactivateEditMode}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    :\r\n                    <span onDoubleClick={this.activateEditMode}>\r\n                        {this.props.status || DEFAULT_STATUS}\r\n                    </span>\r\n                }\r\n            </>)\r\n    };\r\n}","import React, {FC} from 'react';\r\nimport {FormikProps} from \"formik\";\r\nimport {UserInfoType} from \"../../../../redux/reducers/profile-reducer\";\r\nimport s from './Contact.module.css'\r\nimport {Button} from \"../../../../UI/Button/Button\";\r\n\r\ntype ContactPropsType = {\r\n    name: string\r\n    value: string\r\n    isEditModeOn: boolean\r\n    fieldName?: string\r\n    formik?: FormikProps<Omit<UserInfoType, 'photos'>>\r\n}\r\n\r\nexport const Contact: FC<ContactPropsType> = ({name, value, isEditModeOn,fieldName, formik}) => {\r\n    return (\r\n        <div >{\r\n            isEditModeOn && formik ?\r\n                <h4>{fieldName}:\r\n                    <input\r\n                        {...formik.getFieldProps(name)}\r\n                    />\r\n                </h4>\r\n                :\r\n                <Button className={s.link} >\r\n                    <a href={value} target={'_blank'} rel=\"noreferrer\">{name}</a>\r\n                </Button>\r\n        }\r\n        </div>\r\n    );\r\n}","import React, {FC, memo} from 'react';\r\nimport {ProfileStatus} from \"../ProfileStatus\";\r\nimport {Contact} from \"../Contact/Contact\";\r\nimport {useFormik} from \"formik\";\r\nimport {updateProfileInfoTC} from \"../../../../redux/action-creators/profile\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button} from \"../../../../UI/Button/Button\";\r\nimport {ProfileDataPropsType} from \"../ProfileData/ProfileData\";\r\nimport s from './ProfileDataForm.module.css';\r\n\r\ntype ProfileDataFormPropsType = ProfileDataPropsType & { onEditProfileClick: () => void }\r\n\r\nexport const ProfileDataForm: FC<ProfileDataFormPropsType> = memo(({\r\n                                                                       userInfo,\r\n                                                                       status,\r\n                                                                       handleProfileStatusUpdate,\r\n                                                                       isEditModeOn,\r\n                                                                       onEditProfileClick\r\n                                                                   }) => {\r\n\r\n    const {\r\n        fullName,\r\n        lookingForAJobDescription,\r\n        aboutMe,\r\n        contacts,\r\n        lookingForAJob,\r\n        userId\r\n    } = userInfo;\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            lookingForAJob,\r\n            fullName,\r\n            aboutMe,\r\n            contacts,\r\n            lookingForAJobDescription,\r\n            userId,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(updateProfileInfoTC(values))\r\n            onEditProfileClick()\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div>\r\n                <span><b>status: </b></span>\r\n                <ProfileStatus\r\n                    status={status}\r\n                    handleProfileStatusUpdate={handleProfileStatusUpdate}\r\n                />\r\n            </div>\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <h4>fullName:\r\n                        <input {...formik.getFieldProps('fullName')}/>\r\n                    </h4>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>aboutMe<b className={s.red}>*</b>:\r\n                        <input {...formik.getFieldProps('aboutMe')}/>\r\n                    </h4>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>lookingForAJob:\r\n                        <input\r\n                            type={\"checkbox\"}\r\n                            name={'lookingForAJob'}\r\n                            onChange={formik.handleChange}\r\n                            checked={formik.values.lookingForAJob}\r\n                        />\r\n                    </h4>\r\n                </div>\r\n                <div>\r\n                    <h4>lookingForAJobDescription<b className={s.red}>*</b>:\r\n                        <input {...formik.getFieldProps('lookingForAJobDescription')}/>\r\n                    </h4>\r\n                </div>\r\n\r\n                <div>\r\n                    {Object.keys(contacts).map((key: string) => {\r\n                        const value = contacts[key]\r\n                        return (\r\n                            <Contact\r\n                                key={key}\r\n                                name={'contacts.' + key}\r\n                                fieldName={key}\r\n                                value={value}\r\n                                isEditModeOn={isEditModeOn}\r\n                                formik={formik}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n                <Button type=\"submit\">Save changes</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n});","import React, {FC, memo} from 'react';\r\nimport {ProfileStatus} from \"../ProfileStatus\";\r\nimport {Contact} from \"../Contact/Contact\";\r\nimport {UserInfoType} from \"../../../../redux/reducers/profile-reducer\";\r\nimport s from './ProfileData.module.css';\r\n\r\nexport type ProfileDataPropsType = {\r\n    userInfo: UserInfoType\r\n    status: string\r\n    handleProfileStatusUpdate: (status: string) => void\r\n    isEditModeOn: boolean\r\n}\r\n\r\nexport const ProfileData: FC<ProfileDataPropsType> = memo(({\r\n                                                               userInfo,\r\n                                                               handleProfileStatusUpdate,\r\n                                                               status,\r\n                                                               isEditModeOn\r\n                                                           }) => {\r\n\r\n    const {\r\n        fullName,\r\n        lookingForAJobDescription,\r\n        aboutMe,\r\n        contacts,\r\n        lookingForAJob,\r\n    } = userInfo;\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.name}>\r\n                <h3>{fullName}</h3>\r\n            </div>\r\n            <div>\r\n                <span><b>status: </b></span>\r\n                <ProfileStatus\r\n                    status={status}\r\n                    handleProfileStatusUpdate={handleProfileStatusUpdate}\r\n                />\r\n            </div>\r\n            <div>\r\n                <h4>aboutMe: <span className={s.description}>{aboutMe}</span></h4>\r\n            </div>\r\n            <div>\r\n                <h4>lookingForAJob: <span\r\n                    className={s.description}>{lookingForAJob ? 'yes' : 'no'}</span>\r\n                </h4>\r\n            </div>\r\n            {lookingForAJob &&\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h4>Description: <span\r\n\t\t\t\t\t\tclassName={s.description}>{lookingForAJobDescription}</span>\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n            }\r\n            <div>\r\n                {Object.keys(contacts).map((key: string) => {\r\n                    const value = contacts[key]\r\n                    return (\r\n                        value !== null &&\r\n\t\t\t\t\t\t<Contact key={key} name={key} value={value}\r\n\t\t\t\t\t\t\t\t isEditModeOn={isEditModeOn}/>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n});","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {UserInfoType} from \"../../../redux/reducers/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport avatarDefault from \"../../../assets/images/user-avatar.webp\";\r\nimport {Button} from \"../../../UI/Button/Button\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    userInfo: UserInfoType\r\n    status: string\r\n    isProfileOwner: boolean\r\n    savePhoto: (photoFile: File) => void\r\n    handleProfileStatusUpdate: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = React.memo(props => {\r\n    const {\r\n        userInfo,\r\n        status,\r\n        savePhoto,\r\n        isProfileOwner,\r\n        handleProfileStatusUpdate\r\n    } = props;\r\n\r\n    const {photos} = userInfo;\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onMainPhotoChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onEditProfileClick = useCallback(() => {\r\n        setEditMode(!editMode)\r\n    }, [editMode])\r\n\r\n    const isPhotosSmallExists = photos.small || avatarDefault\r\n\r\n    if (!userInfo) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.wrapper}>\r\n                <div className={s.avatarBlock}>\r\n                    <img className={s.avatar} src={isPhotosSmallExists} alt=\"avatar\"/>\r\n                    {editMode &&\r\n\t\t\t\t\t<div>\r\n                        <h4>Change photo</h4>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype={'file'}\r\n\t\t\t\t\t\t\tname={\"file\"}\r\n\t\t\t\t\t\t\taccept=\"image/png, image/gif, image/jpeg\"\r\n\t\t\t\t\t\t\tonChange={onMainPhotoChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>}\r\n                    {isProfileOwner &&\r\n\t\t\t\t\t<Button onClick={onEditProfileClick} className={s.btn}>\r\n                        Edit Profile\r\n                    </Button>}\r\n                </div>\r\n                {editMode ?\r\n                    <ProfileDataForm\r\n                        userInfo={userInfo}\r\n                        handleProfileStatusUpdate={handleProfileStatusUpdate}\r\n                        status={status}\r\n                        isEditModeOn={editMode}\r\n                        onEditProfileClick={onEditProfileClick}\r\n                    />\r\n                    :\r\n                    <ProfileData\r\n                        handleProfileStatusUpdate={handleProfileStatusUpdate}\r\n                        status={status}\r\n                        userInfo={userInfo}\r\n                        isEditModeOn={editMode}\r\n                    />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    getProfileStatusTC, savePhotoTC,\r\n    setUserInfoTC,\r\n    updateProfileStatusTC\r\n} from \"../../redux/action-creators/profile\";\r\n\r\nconst Profile: React.FC = () => {\r\n\r\n    const userInfo = useTypedSelector(state => state.profilePage.userInfo)\r\n    const authId = useTypedSelector(state => state.auth.id)\r\n    const status = useTypedSelector(state => state.profilePage.status)\r\n    const dispatch = useDispatch()\r\n    const {userId} = useParams<'userId'>()\r\n\r\n    const isProfileOwner = userId ? authId === +userId : false\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            dispatch(setUserInfoTC(+userId))\r\n            dispatch(getProfileStatusTC(+userId))\r\n        }\r\n    }, [dispatch, userId])\r\n\r\n    const savePhoto = useCallback((photoFile: File) => {\r\n        if (userId) {\r\n            dispatch(savePhotoTC(photoFile,+userId ))\r\n        }\r\n    }, [dispatch, userId])\r\n\r\n    const handleProfileStatusUpdate = useCallback((status: string) => {\r\n        if (userId && authId === +userId) {\r\n            dispatch(updateProfileStatusTC(status))\r\n        }\r\n    }, [dispatch, authId, userId])\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                savePhoto={savePhoto}\r\n                isProfileOwner={isProfileOwner}\r\n                userInfo={userInfo}\r\n                status={status}\r\n                handleProfileStatusUpdate={handleProfileStatusUpdate}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","export default __webpack_public_path__ + \"static/media/user-avatar.2ca07d6b.webp\";"],"sourceRoot":""}